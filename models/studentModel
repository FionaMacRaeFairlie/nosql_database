const nedb = require("gray-nedb");
class studentDB {
  constructor(dbFilePath) {
    if (dbFilePath) {
      this.db = new nedb({ filename: dbFilePath, autoload: true });
      console.log("DB connected to " + dbFilePath);
    } else {
      this.db = new nedb();
    }
  }
  init() {
    this.db.insert(
      {
        student: "Ross",
        age: 20,
        programme: "Software Development",
        modules: [
          {
            name: "Programming",
            grade: 62,
          },
          {
            name: "Web Development",
            grade: 57,
          },
          {
            name: "Software Engineering",
            grade: 73,
          },
        ],
      },
      function (err, newDoc) {
        if (err) {
          console.log("error", err);
        } else {
          console.log("document inserted", newDoc);
        }
      }
    );
    this.db.insert(
      {
        student: "Ed",
        age: 20,
        programme: "Software Development",
        modules: [
          {
            name: "Programming",
            grade: 40,
          },
          {
            name: "Web Development",
            grade: 54,
          },
          {
            name: "Software Engineering",
            grade: 63,
          },
        ],
      },
      function (err, newDoc) {
        if (err) {
          console.log("error", err);
        } else {
          console.log("document inserted", newDoc);
        }
      }
    );
    this.db.insert(
      {
        student: "Ann",
        age: 20,
        programme: "Computing",
        modules: [
          {
            name: "Programming",
            grade: 57,
          },
          {
            name: "Web Development",
            grade: 70,
          },
          {
            name: "Software Engineering",
            grade: 59,
          },
        ],
      },
      function (err, newDoc) {
        if (err) {
          console.log("error", err);
        } else {
          console.log("document inserted", newDoc);
        }
      }
    );
    this.db.insert(
      {
        student: "Ali",
        age: 23,
        programme: "Software Development",
        modules: [
          {
            name: "Programming",
            grade: 36,
          },
          {
            name: "Application Architectures",
            grade: 36,
          },
          {
            name: "Software Engineering",
            grade: 66,
          },
        ],
      },
      function (err, newDoc) {
        if (err) {
          console.log("error", err);
        } else {
          console.log("document inserted", newDoc);
        }
      }
    );
    this.db.insert(
      {
        student: "Fred",
        age: 20,
        programme: "Software Development",
        modules: [
          {
            name: "Programming",
            grade: 78,
          },
          {
            name: "Application Architectures",
            grade: 67,
          },
          {
            name: "Software Engineering",
            grade: 69,
          },
        ],
      },
      function (err, newDoc) {
        if (err) {
          console.log("error", err);
        } else {
          console.log("document inserted", newDoc);
        }
      }
    );
    this.db.insert(
      {
        student: "Colin",
        age: 20,
        programme: "Software Development",
        modules: [
          {
            name: "Programming",
            grade: 61,
          },
          {
            name: "Application Architectures",
            grade: 42,
          },
          {
            name: "Software Engineering",
            grade: 70,
          },
        ],
      },
      function (err, newDoc) {
        if (err) {
          console.log("error", err);
        } else {
          console.log("document inserted", newDoc);
        }
      }
    );
  }

  displayAll() {
    return new Promise((resolve, reject) => {
      this.db.find({}, function (err, entries) {
        if (err) {
          reject(err);
        } else {
          resolve(entries);
          console.log("function returns: ", entries);
        }
      });
    });
  }

  displayWebDev() {
    return new Promise((resolve, reject) => {
      // this.db.find(
      //   { "modules.name": "Web Development" },
      this.db.find({ "modules.name": "Web Development" }).sort({"student":1}).exec(
        function (err, entries) {
          if (err) {
            reject(err);
          } else {
            resolve(entries);
            console.log("function returns: ", entries);
          }
        }
      );
    });
  }

  displayAppArch() {
    return new Promise((resolve, reject) => {
      this.db.find(
        { "modules.name": "Application Architectures" },
        function (err, entries) {
          if (err) {
            reject(err);
          } else {
            resolve(entries);
            console.log("function returns: ", entries);
          }
        }
      );
    });
  }

  displayLowPerformance() {
    return new Promise((resolve, reject) => {
      this.db.find({ "modules.grade": { $lt: 50 } }, function (err, entries) {
        if (err) {
          reject(err);
        } else {
          resolve(entries);
          console.log("function lowPerformance returns: ", entries);
        }
      });
    });
  }

  displayFail(subject) {
    return new Promise((resolve, reject) => {
      console.log(subject);
      this.db.find( {"modules":{$elemMatch:{ "name":subject,"grade":{ $lt: 40 }}} }).sort({"student":1}).exec(
        function (err, entries) {
          if (err) {
            reject(err);
          } else {
            resolve(entries);
            console.log("function returns: ", entries);
          }
        }
      );
    });
  }

  displayPass(subject) {
    return new Promise((resolve, reject) => {
      console.log(subject);
    //   this.db.find(
    //     { modules: { $elemMatch: { name: subject, grade: { $gte: 40 } } } },
           this.db.find( {"modules":{$elemMatch:{ "name":subject,"grade":{ $gte: 40 }}} }).sort({"student":1}).exec(
        function (err, entries) {
          if (err) {
            reject(err);
          } else {
            resolve(entries);
            console.log("function returns: ", entries);
          }
        }
      );
    });
  }
}


// update({ student: 'Ross'},{$set:{'age':24} },{},function(err,numUp){
// if(err){
// console.log('error updating documents',err);
// } else {
// console.log(numUp,'document updated. Ross age updated')
// }
// })

// update({ student: 'Fred'},{$push:{'modules':{name:'Web Development','grade':67 }} },{},function(err,newMark){
// if(err){
// console.log('error updating documents',err);
// } else {
// console.log(newMark,'document updated. New mark recorded for Fred for Web Development');
// }
// })

// remove({ 'student': 'Ed'},{}, function(err,docsRem){
// if(err){
// console.log('error deleting document Ed');
// } else {
// console.log(docsRem, ' update. Document Ed removed from database')
// }
// })



// }
//make the module visible outside
module.exports = studentDB;
